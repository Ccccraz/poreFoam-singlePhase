#!/bin/bash

export scriptName=`basename "${BASH_SOURCE[0]}"`
usage()
{
	echo "usage:"
	echo ;  echo "$scriptName \"*.mhd\"  \"X\" binary";  echo
	echo "Arguments (all optional):"
	echo "  arg1: name of images to run flow simulations on (defaults is *.mhd)"
	echo "  arg2: flow direction(s):  any combination of X Y Z"
	echo "  arg3: output format for FOAM2Voxel: \".dat\", \".raw\" , \".tif\" (default), "
	echo "        or \"oldAscii\" (for compatibility with old IC codes)" 
	echo "Example:" 
	echo "$scriptName \"\$(ls *.mhd)\"" 
}
if [ "$1" == "" ]; then usage; fi
if [ "$1" == "-h" ]; then usage; exit; fi
if [ "$1" == "--help" ]; then usage; exit; fi
if [ -n "$2" ]; then 
	if [[ $2 != [XYZ] ]]; then echo "Error: \$2 ($2) can be X Y or Z only ";  exit; fi
fi
echo $scriptName $@
echo


baseCase="base"

myCurrentDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )
: ${psDir:=$myCurrentDIR} ; export psDir

#dataFiles="Berea.mhd" 
if [ -n "$1" ]; then  dataFiles=$1
else                  dataFiles="$(ls *.mhd)"
fi
echo "Images: $dataFiles"

: ${directions:=$2}
: ${directions:=X}
  echo "flow directions=\"$directions\" "

: ${outPutFormat:=$3}
: ${outPutFormat:=tif}
  echo "outPutFormat=\"$outPutFormat\" "


#~ maxDeltaT="2e-5"
endTime=.1


ps=" 1"


. $psDir/scripts/singlePhase/initialize



for datFile in $dataFiles
do
dataFile=${datFile%.*}

prefix="$dataFile/"
mkdir $prefix


for direction in $directions
do
echo "direction $direction"

for p in $ps
do
echo "p @ $direction : $p  Pa"

  caseName="$prefix""$dataFile-$p""-$direction"
  if  ! [ -d $caseName ]; then 
	#~ LAM_MPI_SESSION_SUFFIX="$(echo $caseName | sed 's/\///g')"
	#~ echo $LAM_MPI_SESSION_SUFFIX
	#~ lamboot -v machines.txt 



	if [ -d ./base ]; then 
		cp -r ./base $caseName
	else
		cp -r $SP_MACROS_DIR/base $caseName
	fi

	(cd $caseName/0 && mv p.$direction p)
	(cd $caseName/0 && rm p.*)
	(cd $caseName/0 && mv U.$direction U)
	(cd $caseName/0 && rm U.*)


	cpymhd=$caseName/${dataFile}_input.mhd

	if [ -f $dataFile.mhd ]; then 
	  cp $dataFile.mhd  $cpymhd
	  sed -i 's/^ElementDataFile[ \t]*=[ \t]*/ElementDataFile = ..\/..\//' $cpymhd
	elif [ -f $dataFile.nhdr ]; then 
	  echo "ObjectType =  Image" >   $cpymhd
	  echo "NDims =       3"     >>   $cpymhd
	  echo "ElementType = MET_UCHAR"  >>   $cpymhd
	  echo ""  >>   $cpymhd
	  tmpp=`more $dataFile.nhdr | grep sizes |  sed 's/sizes/ /'  |  sed 's/:/ /'`
	  echo $tmpp
	  echo "DimSize =  $tmpp" >>   $cpymhd
	  tmpp=$(more $dataFile.nhdr | grep directions |  sed 's/directions/ /' |  sed 's/space//'  |  sed 's/:/ /') 
	  echo $tmpp
	  echo  >>   $cpymhd
	  echo "ElementSpacing =  $tmpp" | sed 's/\,/ /g' | sed 's/)/ /g' | sed 's/(/ /g' | sed 's/ 0 / /g' | sed 's/ 0 / /g' >>   $cpymhd
	  echo "Offset = 0 0 0" >>   $cpymhd
	  echo ""  >>   $cpymhd
	  echo "ElementDataFile = $datFile"  >>   $cpymhd
	  echo ""  >>   $cpymhd
	elif [ -f $dataFile.tif ]; then 
	  echo "ObjectType =  Image" >   $cpymhd
	  echo "NDims =       3"     >>   $cpymhd
	  echo "ElementType = MET_UCHAR"  >>   $cpymhd	   
	  echo ""  >>   $cpymhd
	  echo "ElementDataFile = ../../$datFile"  >>   $cpymhd
	  echo ""  >>   $cpymhd
	  echo "#ElementSpacing =  1  1  1 " >>   $cpymhd
	  echo "#Offset = 0 0 0" >>   $cpymhd

	  echo "Please check the content of $cpymhd if not correct, provide "
	  echo "a similar but correct .mhd file in the current directory, i.e:"
	  echo " cp $cpymhd $caseName.mhd     &&    rm $caseName"
	  echo "and try again"
	else
	  echo "can not find the file  $dataFile.mhd nor  $dataFile.nhdr nor  $dataFile.tif"
	  exit
	fi



	(cd $caseName && runApplication voxelToFoam  ${dataFile}_input.mhd )



	(cd $caseName && touch ${caseName//\//-}.foam)



	setBoundaryCondition "$direction"  "value" "uniform  $p" ./$caseName/0/p 


	(cd $caseName && runApplication renumberMesh -overwrite)


	setKeywordValues endTime $endTime ./$caseName/system/controlDict 

	#setKeywordValues writeFormat ascii ./$caseName/system/controlDict 

	(cd $caseName && runApplication iPotentialFoam)

	#setKeywordValues writeFormat binary ./$caseName/system/controlDict 

	setSubKeywordValues relaxationFactors "U" "0.5" ./$caseName/system/fvSolution

	setKeywordValues writeInterval 1000 ./$caseName/system/controlDict 
	echo "..................Runing single phase flow code......................."
	(cd $caseName && runApplication iInterFoam101SP)
	(cd $caseName && mv log.iInterFoam101SP log.iInterFoam101SP.1)




	#(cd $caseName && runApplication calc_perms)
	(cd $caseName && runApplication calc_distributions)

	(cd $caseName && runApplication  FOAM2Voxel vxlImage.mhd 1 $outPutFormat)


	echo "..................            END              ......................."

	#~ lamhalt -d
   else
     echo "skipping $caseName"
   fi
done
done
done




